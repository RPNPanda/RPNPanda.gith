@import "variables";

@mixin fontdef($OpenSansPath, $OpenSansVersion, $FontType:"Regular") {
	src: url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?v=#{$OpenSansVersion}');
	src: url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.eot?#iefix&v=#{$OpenSansVersion}') format('embedded-opentype'),
	url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.woff2?v=#{$OpenSansVersion}') format('woff2'),
	url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.woff?v=#{$OpenSansVersion}') format('woff'),
	url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.ttf?v=#{$OpenSansVersion}') format('truetype'),
	url('#{$OpenSansPath}/#{$FontType}/OpenSans-#{$FontType}.svg?v=#{$OpenSansVersion}##{$FontType}') format('svg');
}

@mixin scale($amount) {
	-webkit-transform: scale($amount); // Safari and Chrome(Engine:-Webkit)
	-moz-transform: scale($amount); // Mozilla(Engine:-Gecko)
	-ms-transform: scale($amount); // IE(Engine:-Trident)
	-o-transform: scale($amount); // Opera(Engine:-Presto)
	transform: scale($amount);
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow: inset $top $left $blur $color;
		-moz-box-shadow: inset $top $left $blur $color;
		box-shadow: inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}

@mixin rounded($radius: 0.5em) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

@mixin no-select() {
	-webkit-user-select: none;
	-moz-user-select: none;
	-khtml-user-select: none;
	user-select: none;
}

@mixin box($box) {
	-webkit-box-sizing: $box;
	-moz-box-sizing: $box;
	box-sizing: $box;
}

@mixin blur($blur) {
	-webkit-filter: blur($blur);
	-moz-filter: blur($blur);
	-ms-filter: blur($blur);
	-o-filter: blur($blur);
	filter: blur($blur);
}

@mixin textshadow-gradient($text-color) {
	text-shadow: darken($text-color, 1%) 1px 0 0, darken($text-color,16%) -1px 0 0, darken($text-color, 32%) 0 1px 0, darken($text-color, 50%) 0 -1px 0, darken($text-color, 70%) 3px 3px 5px, darken($text-color, 99%) 5px 5px 15px;
}

@mixin background-linear-gradient($back, $start: #000, $stop: #FFF) {
	background-color: $back;
	background: -webkit-linear-gradient(top, $start, $stop);
	background: linear-gradient(to bottom, $start, $stop);
}

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
	text-shadow: $x $y $blur $color;
}

@mixin text-shadow-white-gradient() {
	text-shadow: #eee 1px 0 0, #eee -1px 0 0, #eee 0 1px 0, #eee 0 -1px 0, #bbb 3px 3px 5px, #b1ae97 5px 5px 15px;
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

@mixin respond-to-horizontal-device($device) {
	@if $device == pad {
		@media only screen and (min-width: 400px) and (max-height: 600px) {
			@content;
		}
	} @else if $device == phone {
		@media only screen and (min-width: 400px) and (max-height: 260px) {
			@content;
		}
	}
}

@mixin respond-to-height($media) {
	@if $media == pico-down {
		@media only screen and (max-height: $bp-pico) {
			@content;
		}
	} @else if $media == pico-up {
		@media only screen and (min-height: $bp-pico) {
			@content;
		}
	} @else if $media == tiny-down {
		@media only screen and (max-height: $bp-tiny) {
			@content;
		}
	} @else if $media == tiny-up {
		@media only screen and (min-height: $bp-tiny) {
			@content;
		}
	} @else if $media == small-up {
		@media only screen and (min-height: $bp-small) {
			@content;
		}
	} @else if $media == small-down {
		@media only screen and (max-height: $bp-small) {
			@content;
		}
	} @else if $media == medium-up {
		@media only screen and (min-height: $bp-medium) {
			@content;
		}
	} @else if $media == medium-down {
		@media only screen and (max-height: $bp-medium) {
			@content;
		}
	} @else if $media == large-up {
		@media only screen and (min-height: $bp-large) {
			@content;
		}
	} @else if $media == large-down {
		@media only screen and (max-height: $bp-large) {
			@content;
		}
	} @else if $media == huge-down {
		@media only screen and (max-height: $bp-huge) {
			@content;
		}
	} @else if $media == huge-up {
		@media only screen and (min-height: $bp-huge) {
			@content;
		}
	} @else if $media == huge-down {
		@media only screen and (max-height: $bp-huge) {
			@content;
		}
	} @else if $media == jumbo-up {
		@media only screen and (min-height: $bp-jumbo) {
			@content;
		}
	} @else if $media == jumbo-down {
		@media only screen and (max-height: $bp-jumbo) {
			@content;
		}
	} @else if $media == ludicrous-up {
		@media only screen and (min-height: $bp-ludicrous) {
			@content;
		}
	} @else if $media == jumbo-up {
		@media only screen and (max-height: $bp-ludicrous) {
			@content;
		}
	}
}

@mixin respond-to($media) {
	@if $media == pico-down {
		@media only screen and (max-width: $bp-pico) {
			@content;
		}
	} @else if $media == pico-up {
		@media only screen and (min-width: $bp-pico) {
			@content;
		}
	} @else if $media == tiny-down {
		@media only screen and (max-width: $bp-tiny) {
			@content;
		}
	} @else if $media == tiny-up {
		@media only screen and (min-width: $bp-tiny) {
			@content;
		}
	} @else if $media == small-up {
		@media only screen and (min-width: $bp-small) {
			@content;
		}
	} @else if $media == small-down {
		@media only screen and (max-width: $bp-small) {
			@content;
		}
	} @else if $media == medium-up {
		@media only screen and (min-width: $bp-medium) {
			@content;
		}
	} @else if $media == medium-down {
		@media only screen and (max-width: $bp-medium) {
			@content;
		}
	} @else if $media == large-up {
		@media only screen and (min-width: $bp-large) {
			@content;
		}
	} @else if $media == large-down {
		@media only screen and (max-width: $bp-large) {
			@content;
		}
	} @else if $media == huge-down {
		@media only screen and (max-width: $bp-huge) {
			@content;
		}
	} @else if $media == huge-up {
		@media only screen and (min-width: $bp-huge) {
			@content;
		}
	} @else if $media == huge-down {
		@media only screen and (max-width: $bp-huge) {
			@content;
		}
	} @else if $media == jumbo-up {
		@media only screen and (min-width: $bp-jumbo) {
			@content;
		}
	} @else if $media == jumbo-down {
		@media only screen and (max-width: $bp-jumbo) {
			@content;
		}
	} @else if $media == ludicrous-up {
		@media only screen and (min-width: $bp-ludicrous) {
			@content;
		}
	} @else if $media == jumbo-up {
		@media only screen and (max-width: $bp-ludicrous) {
			@content;
		}
	}
}

@mixin button() {
	background-color: transparent;
	background-image: none;
	color: $highlight-color;
	border: 1px solid darken($background-color, 10%);
	cursor: pointer;

	&:hover {
		color: lighten($popup-background-color, 3%);
		border: 1px solid lighten($background-color, 10%);
	}

	&.text-button {
		padding: 10px 16px;
	}

	&[disabled] {
		color: #8d8d8d;
		cursor: default;
	}
}

@mixin svg-stones() {
	g.tile {
		/*transition: transform 200ms ease-out;*/
		transform-origin: 50px 32.5px;
		opacity: 1;
	}

	g.hinted g.tile {
		transform: scale(1.12);
	}

	g.hinted g.tile > rect {
		stroke: #9f0000;
		stroke-width: 3px;
	}

	g.selected g.tile {
		transform: scale(1.04);
	}

	g.selected g.tile rect.stone {
		stroke: black;
		fill: #F8EABB;
	}

	g.selected.hinted g.tile {
		transform: scale(1.14);
	}

	g.selected.hinted g.tile > rect {
		stroke: #9f0000;
		stroke-width: 3px;
	}

	g.draw rect.shadow {
		fill: #191919;
		opacity: 0.6;
		stroke-width: 1;
		stroke: black;
	}

	g.draw rect.stone {
		fill: #FFF9E5;
		stroke-width: 1;
		stroke: black;
	}

	g.draw.contrast {
		rect.stone {
			stroke-width: 2;
		}
		rect.shadow {
			opacity: 0.7;
			//transform: translate(1px, 1px);
		}
	}

	g.hidden {
		opacity: 0;
	}

}
@mixin overlay() {

	.overlay {
		height: 100%;
		width: 100%;
		position: fixed;
		top: 0;
		left: 0;
		z-index: 10000;
		background-color: rgba(0, 0, 0, 0.2);
		max-height: 100%;
		font-size: $base-font-size*0.9;

		@include respond-to(medium-up) {
			font-size: $base-font-size*1.1;
		}

		@include respond-to(large-up) {
			font-size: $base-font-size*1.2;
		}

		@include respond-to(huge-up) {
			font-size: $base-font-size*1.2;
		}

		@include respond-to(jumbo-up) {
			font-size: $base-font-size*2;
		}

		@include respond-to-height(small-down) {
			font-size: $base-font-size*0.9;
		}

		.overlay-popup {
			position: fixed;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			max-height: 98%;
			max-width: 98%;
			margin-left: auto;
			margin-right: auto;
			border: 1px solid $popup-border-color;
			background-color: $popup-background-color;
			line-height: 1.2em;
			padding: 1.5em 2em;
			@include rounded(12px);
			@include box-shadow(12px, 14px, 16px, rgba(0, 0, 0, 0.5));

			@include respond-to(jumbo-up) {
				@include rounded(30px);
			}

			@include respond-to(huge-up) {
				max-height: 80%;
				max-width: 80%;
			}
		}

		.close {
			right: 4px;
			top: 4px;
			position: absolute;
			color: darkgray;
			cursor: pointer;
			padding: 4px;
			border-radius: 6px;

			&:hover {
				border: 1px solid $popup-border-color;
			}
		}
	}
}
